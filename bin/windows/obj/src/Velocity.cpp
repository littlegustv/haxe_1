// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Behavior
#include <Behavior.h>
#endif
#ifndef INCLUDED_Entity
#include <Entity.h>
#endif
#ifndef INCLUDED_Velocity
#include <Velocity.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_25eabdd89312bf4f_41_new,"Velocity","new",0xdc93c1af,"Velocity.new","Main.hx",41,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_25eabdd89312bf4f_46_update,"Velocity","update",0x1cca101a,"Velocity.update","Main.hx",46,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_25eabdd89312bf4f_50_draw,"Velocity","draw",0x1e235fd5,"Velocity.draw","Main.hx",50,0x087e5c05)

void Velocity_obj::__construct( ::Entity entity,int x,int y){
            	HX_STACKFRAME(&_hx_pos_25eabdd89312bf4f_41_new)
HXLINE(  42)		super::__construct(entity);
HXLINE(  43)		this->x = x;
HXLINE(  44)		this->y = y;
            	}

Dynamic Velocity_obj::__CreateEmpty() { return new Velocity_obj; }

void *Velocity_obj::_hx_vtable = 0;

Dynamic Velocity_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Velocity_obj > _hx_result = new Velocity_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Velocity_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4a915116) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x4a915116;
	} else {
		return inClassId==(int)0x5efcc2a1;
	}
}

void Velocity_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_25eabdd89312bf4f_46_update)
HXLINE(  47)		 ::Entity _hx_tmp = this->entity;
HXDLIN(  47)		_hx_tmp->x = (_hx_tmp->x + (this->x * dt));
HXLINE(  48)		 ::Entity _hx_tmp1 = this->entity;
HXDLIN(  48)		_hx_tmp1->y = (_hx_tmp1->y + (this->y * dt));
            	}


void Velocity_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_25eabdd89312bf4f_50_draw)
            	}



hx::ObjectPtr< Velocity_obj > Velocity_obj::__new( ::Entity entity,int x,int y) {
	hx::ObjectPtr< Velocity_obj > __this = new Velocity_obj();
	__this->__construct(entity,x,y);
	return __this;
}

hx::ObjectPtr< Velocity_obj > Velocity_obj::__alloc(hx::Ctx *_hx_ctx, ::Entity entity,int x,int y) {
	Velocity_obj *__this = (Velocity_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Velocity_obj), true, "Velocity"));
	*(void **)__this = Velocity_obj::_hx_vtable;
	__this->__construct(entity,x,y);
	return __this;
}

Velocity_obj::Velocity_obj()
{
}

hx::Val Velocity_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Velocity_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Velocity_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Velocity_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Velocity_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Velocity_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Velocity_obj_sStaticStorageInfo = 0;
#endif

static ::String Velocity_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	::String(null()) };

static void Velocity_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Velocity_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Velocity_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Velocity_obj::__mClass,"__mClass");
};

#endif

hx::Class Velocity_obj::__mClass;

void Velocity_obj::__register()
{
	hx::Object *dummy = new Velocity_obj;
	Velocity_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Velocity","\x3d","\xbe","\xaf","\xf8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Velocity_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Velocity_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Velocity_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Velocity_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Velocity_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Velocity_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

