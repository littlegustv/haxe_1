// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Animate
#include <Animate.h>
#endif
#ifndef INCLUDED_Behavior
#include <Behavior.h>
#endif
#ifndef INCLUDED_Entity
#include <Entity.h>
#endif
#ifndef INCLUDED_haxegon_Gfx
#include <haxegon/Gfx.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_79e12f8e760aa9b4_14_new,"Animate","new",0xa13377f3,"Animate.new","Main.hx",14,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_79e12f8e760aa9b4_26_update,"Animate","update",0x3f529c56,"Animate.update","Main.hx",26,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_79e12f8e760aa9b4_34_draw,"Animate","draw",0x65432511,"Animate.draw","Main.hx",34,0x087e5c05)

void Animate_obj::__construct( ::Entity entity,::String sprite,Float speed){
            	HX_STACKFRAME(&_hx_pos_79e12f8e760aa9b4_14_new)
HXLINE(  18)		this->time = ((Float)0);
HXLINE(  15)		this->frame = (int)0;
HXLINE(  21)		super::__construct(entity);
HXLINE(  22)		this->sprite = sprite;
HXLINE(  23)		this->frames = ::haxegon::Gfx_obj::numberoftiles(sprite);
HXLINE(  24)		this->speed = speed;
            	}

Dynamic Animate_obj::__CreateEmpty() { return new Animate_obj; }

void *Animate_obj::_hx_vtable = 0;

Dynamic Animate_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Animate_obj > _hx_result = new Animate_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Animate_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x479e0281) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x479e0281;
	} else {
		return inClassId==(int)0x4a915116;
	}
}

void Animate_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_79e12f8e760aa9b4_26_update)
HXLINE(  27)		 ::Animate _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  27)		_hx_tmp->time = (_hx_tmp->time + dt);
HXLINE(  28)		if ((this->time >= this->speed)) {
HXLINE(  29)			this->time = (int)0;
HXLINE(  30)			this->frame = hx::Mod((this->frame + (int)1),this->frames);
            		}
            	}


void Animate_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_79e12f8e760aa9b4_34_draw)
HXDLIN(  34)		::haxegon::Gfx_obj::drawtile(this->entity->x,this->entity->y,this->sprite,this->frame);
            	}



hx::ObjectPtr< Animate_obj > Animate_obj::__new( ::Entity entity,::String sprite,Float speed) {
	hx::ObjectPtr< Animate_obj > __this = new Animate_obj();
	__this->__construct(entity,sprite,speed);
	return __this;
}

hx::ObjectPtr< Animate_obj > Animate_obj::__alloc(hx::Ctx *_hx_ctx, ::Entity entity,::String sprite,Float speed) {
	Animate_obj *__this = (Animate_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Animate_obj), true, "Animate"));
	*(void **)__this = Animate_obj::_hx_vtable;
	__this->__construct(entity,sprite,speed);
	return __this;
}

Animate_obj::Animate_obj()
{
}

void Animate_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Animate);
	HX_MARK_MEMBER_NAME(frame,"frame");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(sprite,"sprite");
	 ::Behavior_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Animate_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(frame,"frame");
	HX_VISIT_MEMBER_NAME(frames,"frames");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(sprite,"sprite");
	 ::Behavior_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Animate_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { return hx::Val( frame ); }
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frames") ) { return hx::Val( frames ); }
		if (HX_FIELD_EQ(inName,"sprite") ) { return hx::Val( sprite ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Animate_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { frame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frames") ) { frames=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sprite") ) { sprite=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Animate_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"));
	outFields->push(HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"));
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"));
	outFields->push(HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Animate_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Animate_obj,frame),HX_HCSTRING("frame","\x2d","\x78","\x83","\x06")},
	{hx::fsInt,(int)offsetof(Animate_obj,frames),HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac")},
	{hx::fsFloat,(int)offsetof(Animate_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsFloat,(int)offsetof(Animate_obj,time),HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c")},
	{hx::fsString,(int)offsetof(Animate_obj,sprite),HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Animate_obj_sStaticStorageInfo = 0;
#endif

static ::String Animate_obj_sMemberFields[] = {
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"),
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"),
	HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	::String(null()) };

static void Animate_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Animate_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Animate_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Animate_obj::__mClass,"__mClass");
};

#endif

hx::Class Animate_obj::__mClass;

void Animate_obj::__register()
{
	hx::Object *dummy = new Animate_obj;
	Animate_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Animate","\x81","\x02","\x9e","\x47");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Animate_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Animate_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Animate_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Animate_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Animate_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Animate_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

