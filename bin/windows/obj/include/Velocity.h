// Generated by Haxe 3.4.7
#ifndef INCLUDED_Velocity
#define INCLUDED_Velocity

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_Behavior
#include <Behavior.h>
#endif
HX_DECLARE_CLASS0(Behavior)
HX_DECLARE_CLASS0(Entity)
HX_DECLARE_CLASS0(Velocity)



class HXCPP_CLASS_ATTRIBUTES Velocity_obj : public  ::Behavior_obj
{
	public:
		typedef  ::Behavior_obj super;
		typedef Velocity_obj OBJ_;
		Velocity_obj();

	public:
		enum { _hx_ClassId = 0x5efcc2a1 };

		void __construct( ::Entity entity,int x,int y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Velocity")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Velocity"); }
		static hx::ObjectPtr< Velocity_obj > __new( ::Entity entity,int x,int y);
		static hx::ObjectPtr< Velocity_obj > __alloc(hx::Ctx *_hx_ctx, ::Entity entity,int x,int y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Velocity_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Velocity","\x3d","\xbe","\xaf","\xf8"); }

		int x;
		int y;
		void update(Float dt);

		void draw();

};


#endif /* INCLUDED_Velocity */ 
